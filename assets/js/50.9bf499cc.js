(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{410:function(a,s,t){"use strict";t.r(s);var e=t(46),v=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"deepin-初上手攻略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#deepin-初上手攻略"}},[a._v("#")]),a._v(" Deepin 初上手攻略")]),a._v(" "),t("p",[t("strong",[a._v("深度操作系统（Deepin）")]),a._v(" 是目前国内最流行和活跃的 Linux 发行版，一直以“免除新手痛苦、节约老手时间”为口号。")]),a._v(" "),t("p",[a._v("我从2020年 10月的 CSDN 程序员节开源大会上了解到这样一款优秀的国产 Linux 发行版，于是颇有兴致地在自己的笔记本电脑上进行了部署。原本我是很抗拒 Linux 系统的，借此机会抱着学习的心态，试试将 Linux 系统作为我的主力系统究竟如何，其结果超出了我的预料。他们确实做到了自己的口号！有一说一，这是我至今用到过的用户界面最美观的Linux 发行版，没有了有 Ubuntu 使用时那种界面操作一顿一顿的卡壳感，操作十分顺滑舒适 。经过几个月的磨合，我感觉和 Deepin 配合得已经比较默契了，真香！")]),a._v(" "),t("p",[a._v("Deepin 毕竟是基于 Linux 内核，对于普通用户肯定上手比较困难。因此写了这样一篇初上手攻略，希望以我浅薄的知识给初入 Deepin 大门的小伙伴们一些参考。相信读完此文后，小伙伴们能对 Deepin 以及 Linux 会有更深刻的认识，能融会贯通驾驭住 Deepin 系统！🎉 😃")]),a._v(" "),t("br"),a._v(" "),t("p",[t("font",{attrs:{color:"#6ba5fc",size:"4"}},[a._v("文章目录")])],1),a._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#安装-deepin-系统"}},[a._v("安装 Deepin 系统")])]),t("li",[t("a",{attrs:{href:"#命令行初步指北"}},[a._v("命令行初步指北")])]),t("li",[t("a",{attrs:{href:"#如何安装和卸载软件"}},[a._v("如何安装和卸载软件")]),t("ul",[t("li",[t("a",{attrs:{href:"#方法一-使用深度商店"}},[a._v("方法一：使用深度商店")])]),t("li",[t("a",{attrs:{href:"#方法二-从官网下载软件包"}},[a._v("方法二：从官网下载软件包")])]),t("li",[t("a",{attrs:{href:"#方法三-使用软件包管理器"}},[a._v("方法三：使用软件包管理器")])]),t("li",[t("a",{attrs:{href:"#补充方法-appimage"}},[a._v("补充方法：AppImage")])])])]),t("li",[t("a",{attrs:{href:"#常用软件一览"}},[a._v("常用软件一览")]),t("ul",[t("li",[t("a",{attrs:{href:"#办公"}},[a._v("办公")])]),t("li",[t("a",{attrs:{href:"#上网"}},[a._v("上网")])]),t("li",[t("a",{attrs:{href:"#输入法"}},[a._v("输入法")])]),t("li",[t("a",{attrs:{href:"#社交"}},[a._v("社交")])]),t("li",[t("a",{attrs:{href:"#娱乐"}},[a._v("娱乐")])]),t("li",[t("a",{attrs:{href:"#绘图"}},[a._v("绘图")])])])]),t("li",[t("a",{attrs:{href:"#认识变量与-path"}},[a._v("认识变量与 PATH")]),t("ul",[t("li",[t("a",{attrs:{href:"#变量"}},[a._v("变量")])]),t("li",[t("a",{attrs:{href:"#环境变量"}},[a._v("环境变量")])]),t("li",[t("a",{attrs:{href:"#添加软件到-path"}},[a._v("添加软件到 PATH")])]),t("li",[t("a",{attrs:{href:"#补充"}},[a._v("补充")])])])]),t("li",[t("a",{attrs:{href:"#后续"}},[a._v("后续")])])])]),t("p"),a._v(" "),t("br"),a._v(" "),t("h2",{attrs:{id:"安装-deepin-系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装-deepin-系统"}},[a._v("#")]),a._v(" 安装 Deepin 系统")]),a._v(" "),t("p",[a._v("我们可以在"),t("RouterLink",{attrs:{to:"/02.经验分享/www.deepin.org/zh/download/"}},[a._v("Deepin 官网")]),a._v("上下载官方的系统镜像和深度启动盘制作工具。笔者最初使用的是比较流行的考录软件"),t("RouterLink",{attrs:{to:"/02.经验分享/cn.ultraiso.net/"}},[a._v("UltraIOS")]),a._v("来将镜像考录到 U 盘上，但是在安装系统时，遇到了没有图形引导界面的问题。因此推荐使用官方提供的启动盘制作工具进行考录，且该工具简洁易用，非常适合安装系统的新手。")],1),a._v(" "),t("p",[a._v("从官网上下载好 iso 镜像后（笔者下载的为"),t("code",[a._v("deepin-desktop-community-1002-amd64.iso")]),a._v("），用考录软件将镜像考录到格式化后的 U 盘。打开电脑的 BIOS 面板，在启动选项（Startup）栏中调整启动顺序，将 U 盘（USB Hard Disk）一项调整到最前面。关机，插入考录好的 U 盘，重新开机。根据系统安装引导，一步步完成系统的安装。")]),a._v(" "),t("p",[a._v("唯一需要注意的是，Deepin 系统安装在某一步会提示是否安装 "),t("code",[a._v("nvidia 闭源驱动")]),a._v("，推荐选否，然后系统会自动为你安装开源驱动。开源驱动更为稳定。")]),a._v(" "),t("p",[a._v("安装的详细流程可以参见 Deepin 官方的 "),t("a",{attrs:{href:"https://www.deepin.org/zh/installation/",target:"_blank",rel:"noopener noreferrer"}},[a._v("安装引导"),t("OutboundLink")],1),a._v("。")]),a._v(" "),t("h2",{attrs:{id:"命令行初步指北"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令行初步指北"}},[a._v("#")]),a._v(" 命令行初步指北")]),a._v(" "),t("p",[a._v("作为一个系统桌面用户，私以为 Windows 和 Linux 最大的不同，就是 Linux 桌面系统具有十分好用且完善的命令行终端——Bash。用户通过键盘向 Bash 输入指令，计算机接收到指令后，予以执行。Bash 是 Linux 系统心灵的窗户，只有透过 Bash 这个窗口，用户才能真正与 Linux 相通，感受其独有的那一份魅力。")]),a._v(" "),t("p",[a._v("为什么需要掌握 Bash 呢？我平常用鼠标在桌面上这里点点，那里点点，不也可以完成日常的上网、办公等事项了吗，干嘛还要花时间学习命令行操作？诚然，Deepin 系统已经基于 Linux 做了很多优化，使得普通用户不用接触命令行也能正常使用系统；但一旦系统某一天突然出现了故障，例如某个软件安装出错了，亦或是电脑突然连不上网了，如果不能熟练使用 Bash，就很难找到病根，更不可能解决故障了。通过鼠标在图形化界面上的操作，犹如隔靴搔痒，难以直指病根。因此，如果你想长期使用 Deepin 系统，那么学习和使用 Bash 是无法绕开的一步。")]),a._v(" "),t("p",[a._v("不可否认的是，Bash 的上手难度非常高，常常被认为是一项难以掌握的技能，一串串不知所谓的复杂命令就让初学者望而却步。学习 Bash 就像是学习一门外语，我们已经能够与 Windows 系统顺畅沟通了，但想要与 Linux 推心置腹，就还得学习 Bash 这门“外语”，改变思维模式，熟悉一种新的交流方式，Linux 才能听懂我们在说什么，才愿意和我们交朋友。只要我们不畏惧这门“语言”，不断尝试与 Linux 进行交流，慢慢就会掌握 Bash 了。")]),a._v(" "),t("p",[a._v("当然，这里不会展开详细讲解命令行，只是给大家引个路，要是展开那妥妥的足够出一本书了。如果读者有兴趣深入了解 Linux 系统，鼎力推荐"),t("a",{attrs:{href:"linux.vbird.org"}},[a._v("《鸟哥的Linux私房菜》")]),a._v("，适合各类对 Linux 感兴趣的读者。")]),a._v(" "),t("p",[a._v("Deepin 中有两种方式打开命令行 Bash：一种是使用快捷键 "),t("code",[a._v("CTRL + ALT + T")]),a._v(" 呼出 Bash，这是最常用的方式；第二种是在文件夹中鼠标点击右键，选择“在终端中打开”，此时 Bash 打开后的目录就和文件夹所在的目录相同。")]),a._v(" "),t("center",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/NJUaaron/Pictures/RightClick.png",alt:"右键",height:"300"}})]),a._v(" "),t("p",[a._v("打开 Bash 后，可以在其设置界面调整窗体的透明度。")]),a._v(" "),t("center",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/NJUaaron/Pictures/BashSetting.png",alt:"bash设置",height:"400"}})]),a._v(" "),t("p",[a._v("Deepin 的这个终端透明效果深得吾之喜爱。传统的黑底白字终端总觉得太死板了，年轻人就喜欢整点花哨的东西～\n"),t("center",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/NJUaaron/Pictures/screen.png",alt:"屏幕",height:"440"}})])],1),a._v(" "),t("center",[t("font",{attrs:{color:"gray",size:"2"}},[a._v("谁会拒绝拥有磨砂玻璃效果的控制台呢？")])],1),a._v(" "),t("p",[a._v("下面列举一些 Bash 中常用的命令：")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[a._v("命令")]),a._v(" "),t("th",[a._v("功能")]),a._v(" "),t("th",[a._v("英文全拼")])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("poweroff")]),a._v(" "),t("td",[a._v("关机")]),a._v(" "),t("td",[a._v("power off")])]),a._v(" "),t("tr",[t("td",[a._v("reboot")]),a._v(" "),t("td",[a._v("重启")]),a._v(" "),t("td",[a._v("reboot")])]),a._v(" "),t("tr",[t("td",[a._v("sudo")]),a._v(" "),t("td",[a._v("以超级用户执行命令")]),a._v(" "),t("td",[a._v("super user do")])]),a._v(" "),t("tr",[t("td",[a._v("su")]),a._v(" "),t("td",[a._v("切换到超级用户模式")]),a._v(" "),t("td",[a._v("super user")])]),a._v(" "),t("tr",[t("td",[a._v("cd")]),a._v(" "),t("td",[a._v("切换工作目录")]),a._v(" "),t("td",[a._v("change directory")])]),a._v(" "),t("tr",[t("td",[a._v("ls")]),a._v(" "),t("td",[a._v("列出文件夹中所有文件")]),a._v(" "),t("td",[a._v("list")])]),a._v(" "),t("tr",[t("td",[a._v("mv")]),a._v(" "),t("td",[a._v("移动/重命名文件")]),a._v(" "),t("td",[a._v("move")])]),a._v(" "),t("tr",[t("td",[a._v("rm")]),a._v(" "),t("td",[a._v("删除文件")]),a._v(" "),t("td",[a._v("remove")])]),a._v(" "),t("tr",[t("td",[a._v("mkdir")]),a._v(" "),t("td",[a._v("新建一个文件夹")]),a._v(" "),t("td",[a._v("make directory")])]),a._v(" "),t("tr",[t("td",[a._v("touch")]),a._v(" "),t("td",[a._v("新建一个文件")]),a._v(" "),t("td",[a._v("touch")])]),a._v(" "),t("tr",[t("td",[a._v("pwd")]),a._v(" "),t("td",[a._v("显示当前工作目录")]),a._v(" "),t("td",[a._v("print working directory")])])])]),a._v(" "),t("p",[a._v("Linux 中所有命令都可以加上 "),t("code",[a._v("--help")]),a._v(" 参数来输出该命令的说明。以 "),t("code",[a._v("poweroff")]),a._v(" 命令为例。执行 "),t("code",[a._v("poweroff --help")]),a._v(" 指令后，便会得到关于"),t("code",[a._v("poweroff")]),a._v(" 命令的说明，包括该命令的功能以及用法。")]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("提示")]),a._v(" "),t("p",[a._v("以下以 "),t("code",[a._v("$>")]),a._v(" 符号开头的行都表示在终端 Bash 中输入的内容。")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" poweroff --help\npoweroff "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\nPower off the system.\n\n     --help      Show this "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("help")]),a._v("\n     --halt      Halt the machine\n  -p --poweroff  Switch off the machine\n     --reboot    Reboot the machine\n  -f --force     Force immediate halt/power-off/reboot\n  -w --wtmp-only Don"),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'t halt/power-off/reboot, just write wtmp record\n  -d --no-wtmp   Don'")]),a._v("t "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("write")]),a._v(" wtmp record\n     --no-wall   Don't send wall message before halt/power-off/reboot\n\nSee the halt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("man")]),a._v(" page "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" details.\n")])])]),t("p",[a._v("可以看到第三行给出了"),t("code",[a._v("poweroff")]),a._v(" 命令的功能说明——Power off the system，即关闭系统。说明的下面给出了一系"),t("code",[a._v("poweroff")]),a._v(" 的可选参数，如 "),t("code",[a._v("--help")]),a._v("、"),t("code",[a._v("--halt")]),a._v(" 等。")]),a._v(" "),t("p",[a._v("如果想知道更多关于该命令的细节，可以使用 "),t("code",[a._v("man")]),a._v(" 命令。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("man")]),a._v(" poweroff\n")])])]),t("p",[a._v("如上指令便会得到 "),t("code",[a._v("poweroff")]),a._v(" 命令的说明页（Manual Page）。按 Q 键便能退出说明页。")]),a._v(" "),t("h2",{attrs:{id:"如何安装和卸载软件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何安装和卸载软件"}},[a._v("#")]),a._v(" 如何安装和卸载软件")]),a._v(" "),t("p",[a._v("使用系统的第一件事就应该是给自己电脑上安装各种各样的软件吧！这里一共列举了 Deepin 上三种最常用的安装和卸载软件的方法。三种方法需要灵活变通，每款软件都有最适合它的安装方法。")]),a._v(" "),t("h3",{attrs:{id:"方法一-使用深度商店"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法一-使用深度商店"}},[a._v("#")]),a._v(" 方法一：使用深度商店")]),a._v(" "),t("p",[a._v("Deepin 内置的深度商店非常好用，一些常用的软件都可以直接在商店里下载。包括 TIM，Visual Studio Code，网易云音乐，搜狗拼音，Chrome，WPS，百度网盘等。目前深度商店里的应用还不多，但尚能满足普通电脑用户的日常所需。从深度商店下载安装和卸载软件流程简单，只需要点击一个按钮便可以完成，但缺点是应用较少，且部分软件版本相对落后。"),t("strong",[a._v("这个方法适合大部分普通用户。")])]),a._v(" "),t("h3",{attrs:{id:"方法二-从官网下载软件包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法二-从官网下载软件包"}},[a._v("#")]),a._v(" 方法二：从官网下载软件包")]),a._v(" "),t("p",[a._v("如果想要最新版的软件，直接从软件官网下载软件包来进行安装是更好的选择。以搜狗输入法的安装过程为例。首先，打开浏览器，去到"),t("a",{attrs:{href:"https://pinyin.sogou.com/linux/",target:"_blank",rel:"noopener noreferrer"}},[a._v("搜狗输入法官网"),t("OutboundLink")],1),a._v("，下载输入法安装包。（注意，Deepin 需要后缀名为 "),t("code",[a._v(".deb")]),a._v(" 的安装包）我下载的安装包是"),t("a",{attrs:{href:"https://ime.sogoucdn.com/dl/index/1608303807/sogoupinyin_2.4.0.2905_amd64.deb?st=Q-qb114fnDGIp8iziwYu-A&e=1608520415&fn=sogoupinyin_2.4.0.2905_amd64.deb",target:"_blank",rel:"noopener noreferrer"}},[a._v("sogoupinyin_2.4.0.2905_amd64.deb"),t("OutboundLink")],1),a._v("。浏览器下载的文件会默认放在 "),t("code",[a._v("下载")]),a._v(" 文件夹中。进入到 "),t("code",[a._v("下载")]),a._v(" 目录，打开控制台，使用 "),t("code",[a._v("apt")]),a._v(" 指令进行安装。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" sogoupinyin_2.4.0.2905_amd64.deb\n")])])]),t("p",[a._v("指令执行后，apt 会计算并给出软件占用空间的大小，需要确认是否继续安装，有时还会确认是否安装依赖的软件包。我们只需要按下 Y 键（意为 yes，如果否就按下 N 键），然后敲击回车，安装便会继续。如果没有出现错误提示，安装就完成了。")]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("提示")]),a._v(" "),t("p",[a._v("传统的方法是使用 "),t("code",[a._v("dpkg")]),a._v(" 指令进行软件包的安装，但 "),t("code",[a._v("dpkg")]),a._v(" 安装过程中经常需要解决依赖问题，"),t("code",[a._v("apt")]),a._v(" 相比更加智能，因此更推荐使用 "),t("code",[a._v("apt")]),a._v(" 指令进行安装。")])]),a._v(" "),t("p",[a._v("如果想要卸载软件，则流程稍微复杂一些。假设我们要卸载搜狗输入法，那么首先需要使用 "),t("code",[a._v("apt")]),a._v(" 指令列出所有安装过的软件包。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt")]),a._v(" list\n")])])]),t("p",[a._v("我们得从列出的软件包中找到我们安装的软件包的名字，才能对它进行卸载。但是通常列出的软件包有成百上千个，一个一个找并不合适。这时我们就需要借助"),t("a",{attrs:{href:"https://www.jianshu.com/p/9c0c2b57cb73",target:"_blank",rel:"noopener noreferrer"}},[a._v("管道"),t("OutboundLink")],1),a._v("和 "),t("code",[a._v("grep")]),a._v(" 指令。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt")]),a._v(" list "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" --color sogou\n")])])]),t("p",[t("code",[a._v("|")]),a._v(" 符号表示管道，用于连接两个指令——"),t("code",[a._v("apt")]),a._v(" 和 "),t("code",[a._v("grep")]),a._v("。"),t("code",[a._v("grep")]),a._v(" 指令的用处是帮我们查找文本中匹配的字符串。上面这个命令是检索 "),t("code",[a._v("apt list")]),a._v(" 输出的列表中带有“sogou”字符串的行，"),t("code",[a._v("--color")]),a._v(" 参数能够将匹配的“sogou“字符以醒目的红色标出。笔者的电脑上该命令的输出如下。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("com.sougou.sogoupinyin/stable,now "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2.2")]),a._v(".0.0108-2 amd64 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("已安装"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\nfcitx-sogoupinyin-uk/未知,未知 "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.1")]),a._v(".0 all\nsogoupinyin/stable "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2.3")]),a._v(".1.0112 amd64\nsogoupinyin/未知 "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2.2")]),a._v(".0.0108 i386\n")])])]),t("p",[a._v("可以看到，第一行的末尾有个 "),t("code",[a._v("[已安装]")]),a._v(" 的字样，因此第一行的 "),t("code",[a._v("com.sougou.sogoupinyin")]),a._v(" 就是我们要找的软件包的名字。然后我们就可以使用 "),t("code",[a._v("apt")]),a._v(" 指令卸载该软件包了。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt")]),a._v(" remove com.sougou.sogoupinyin\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("提示")]),a._v(" "),t("p",[a._v("实际上，软件包安装时就会给出软件包的名称 "),t("code",[a._v("com.sougou.sogoupinyin")]),a._v(" ，如果你记住了其名称，就不需要再使用 "),t("code",[a._v("apt list")]),a._v(" 指令去找了。")])]),a._v(" "),t("p",[t("strong",[a._v("这种方法比方法一麻烦许多，但熟悉后还是不难掌握。推荐大家可以尽量学习这种方法，下载自己想要的软件！")])]),a._v(" "),t("h3",{attrs:{id:"方法三-使用软件包管理器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法三-使用软件包管理器"}},[a._v("#")]),a._v(" 方法三：使用软件包管理器")]),a._v(" "),t("p",[t("code",[a._v("apt")]),a._v(" 是 Deepin 自带的一个软件包管理器，主要用于自动从互联网的软件仓库中搜索、安装、升级、卸载软件或操作系统。一般从命令行使用该工具，也可以从深度商店下载 "),t("code",[a._v("新立得软件包管理器")]),a._v(" 来可视化地管理软件包。"),t("code",[a._v("apt")]),a._v(" 命令一般需要"),t("a",{attrs:{href:"https://baike.baidu.com/item/root%E6%9D%83%E9%99%90",target:"_blank",rel:"noopener noreferrer"}},[a._v("root权限"),t("OutboundLink")],1),a._v("执行，所以一般跟着 "),t("code",[a._v("sudo")]),a._v(" 命令。以下列举了"),t("code",[a._v("apt")]),a._v(" 命令的一些常用操作。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("package"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#安装软件包")]),a._v("\n$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt")]),a._v(" remove "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("package"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#移除软件包")]),a._v("\n$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt")]),a._v(" update\t\t\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#更新可用软件包列表")]),a._v("\n$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt")]),a._v(" upgrade \t\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#通过 安装/升级 软件来更新系统")]),a._v("\n")])])]),t("p",[a._v("推荐第一次使用 "),t("code",[a._v("apt")]),a._v(" 时，先执行 "),t("code",[a._v("sudo apt update")]),a._v(" 和 "),t("code",[a._v("sudo apt upgrade")]),a._v(" 指令来更新系统软件包，然后再安装自己需要的软件。")]),a._v(" "),t("p",[a._v("以 "),t("code",[a._v("GNU图像处理程序(GIMP)")]),a._v(" 为例，可以通入如下指令下载安装 GIMP。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" gimp\n")])])]),t("p",[a._v("该指令会自动在软件仓库中寻找匹配的软件包，然后安装下载。")]),a._v(" "),t("p",[a._v("这种方式下载的软件包，卸载方法和方法二中的相同，就不再赘述了。")]),a._v(" "),t("p",[a._v("尽管这种方法只用了一条指令就完成了软件的下载安装，看似非常简单好用，但实际上有很多局限性——许多软件并没有预装在 "),t("code",[a._v("apt")]),a._v(" 的软件仓库中，而且有些软件在仓库中的版本也较低，无法正常使用，因而需要用户自行甄别软件是否适合直接用 "),t("code",[a._v("apt")]),a._v(" 进行下载安装；安装过程中也时常会遇到各种依赖性的问题需要解决。"),t("strong",[a._v("因此，方法三仅推荐熟悉 Linux 的用户使用。")])]),a._v(" "),t("h3",{attrs:{id:"补充方法-appimage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#补充方法-appimage"}},[a._v("#")]),a._v(" 补充方法：AppImage")]),a._v(" "),t("p",[a._v("2013年，Linux 出现了一种新颖的软件打包方式——"),t("strong",[a._v("AppImage")]),a._v("。AppImage 软件包使用简单，无需安装，可以分发到 Linux 所有的发行版中，这些优点使得越来越多的软件开始使用 AppImage 进行打包。如果想要了解更多关于 AppImage 的信息，可以去到 "),t("a",{attrs:{href:"https://appimage.org/",target:"_blank",rel:"noopener noreferrer"}},[a._v("AppImage 官方网站"),t("OutboundLink")],1),a._v("。")]),a._v(" "),t("p",[a._v("下面我们以图床软件 PicGo 的下载使用为例，看看 AppImage 软件包该如何部署到我们的系统中。")]),a._v(" "),t("p",[a._v("首先，从 "),t("a",{attrs:{href:"https://github.com/Molunerfinn/PicGo/releases",target:"_blank",rel:"noopener noreferrer"}},[a._v("PicGo Github网站"),t("OutboundLink")],1),a._v(" 上下载 AppImage 文件，笔者下载的是 "),t("a",{attrs:{href:"https://github.com/Molunerfinn/PicGo/releases/download/v2.2.2/PicGo-2.2.2.AppImage",target:"_blank",rel:"noopener noreferrer"}},[a._v("PicGo-2.2.2.AppImage"),t("OutboundLink")],1),a._v("。然后将下载的文件放到任何你想要存放的位置。Linux 推荐用户下载的软件都统一存放到 "),t("code",[a._v("/usr/local/bin")]),a._v(" 目录下。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" ~/Downloads/PicGo-2.2.2.AppImage /usr/local/bin/PicGo\n")])])]),t("p",[a._v("我们将软件包复制到了"),t("code",[a._v("usr/local/bin")]),a._v(" 目录下并重命名为 "),t("code",[a._v("PicGo")]),a._v("。如果我们此时用 "),t("code",[a._v("ls")]),a._v(" 命令查看这个目录，会发现 "),t("code",[a._v("PicGo")]),a._v(" 显示的是红色，表示系统识别这个文件是压缩文件，并不能直接执行。")]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("提示")]),a._v(" "),t("p",[a._v("Linux 约定了 "),t("code",[a._v("ls")]),a._v(" 命令下不同文件类型会呈现不同的颜色。其中白色表示普通文件，蓝色表示目录，绿色表示可执行文件，红色表示压缩文件。")])]),a._v(" "),t("p",[a._v("使用 "),t("code",[a._v("chmod")]),a._v(" 命令给予 "),t("code",[a._v("PicGo")]),a._v(" 文件可执行权限。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" a+x /usr/local/bin/PicGo\n")])])]),t("p",[a._v("现在再用 "),t("code",[a._v("ls")]),a._v(" 查看，"),t("code",[a._v("PicGo")]),a._v(" 就显示为绿色了。")]),a._v(" "),t("p",[a._v("执行 PicGo。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" PicGo\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("提示")]),a._v(" "),t("p",[a._v("由于 "),t("code",[a._v("/usr/local/bin")]),a._v(" 目录在 PATH 中，我们可以在终端的任何目录下直接执行 "),t("code",[a._v("PicGo")]),a._v("。如果是安装在其他目录下，则需要去到那个目录，使用 "),t("code",[a._v("./PicGo")]),a._v(" 指令来运行 PicGo。关于 PATH 的详细内容可以参见后面的章节 "),t("a",{attrs:{href:"#%E8%AE%A4%E8%AF%86%E5%8F%98%E9%87%8F%E4%B8%8E-path"}},[a._v("认识变量与 PATH")]),a._v("。")])]),a._v(" "),t("p",[a._v("如果要卸载 PicGo，只需要将 AppImage 文件删除即可。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" /usr/local/bin/PicGo\n")])])]),t("h2",{attrs:{id:"常用软件一览"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用软件一览"}},[a._v("#")]),a._v(" 常用软件一览")]),a._v(" "),t("p",[a._v("上一章介绍了在 Deepin 上安装和卸载软件的方法，这一章就来谈一谈 Deepin 上目前十分实用的一些软件。以下软件如果没有特别说明，均可以在深度商店里直接进行下载。")]),a._v(" "),t("h3",{attrs:{id:"办公"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#办公"}},[a._v("#")]),a._v(" 办公")]),a._v(" "),t("p",[a._v("日常办公极力推荐 WPS 办公套件。在 Windows 系统上，笔者一贯使用的都是微软的 Office 办公套件，因为 WPS 上的各类广告实在太多了，让人心生厌恶，所以一直没有使用。让我非常惊讶的是 Linux 版本的 WPS 竟然没有广告，而且和 Linux 系统适配得十分完美，因此非常推荐在 Deepin 上使用。永中Office 也可以作为办公备选，WPS 的 UI 设计比较时尚，永中Office 的 UI 比较老旧，看个人喜好了。")]),a._v(" "),t("p",[a._v("Linux 版本的百度云也没有广告，界面十分简洁，也很推荐。")]),a._v(" "),t("p",[a._v("邮件软件推荐使用系统自带的 "),t("code",[a._v("雷鸟邮件")]),a._v("，功能齐全，十分好用。听说官方很快会把 "),t("code",[a._v("雷鸟邮件")]),a._v("替换成新的邮件软件，期待一波～")]),a._v(" "),t("p",[a._v("编辑 "),t("code",[a._v("Markdown")]),a._v(" 文档推荐使用 "),t("code",[a._v("Typora")]),a._v("，编程推荐使用 "),t("code",[a._v("Visual Studio Code")]),a._v("。")]),a._v(" "),t("h3",{attrs:{id:"上网"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#上网"}},[a._v("#")]),a._v(" 上网")]),a._v(" "),t("p",[a._v("推荐使用谷歌的 "),t("code",[a._v("Chrome")]),a._v(" 浏览器。建议不使用系统自带的火狐浏览器 "),t("code",[a._v("Firefox")]),a._v("，其兼容性较差，国内的网页经常加载不出来。")]),a._v(" "),t("h3",{attrs:{id:"输入法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#输入法"}},[a._v("#")]),a._v(" 输入法")]),a._v(" "),t("p",[a._v("可以使用系统自带的中文输入法。但如果想要输入法更加智能，还是推荐下载搜狗输入法。如果想要向搜狗输入法导入需要的词库，可以参考我的另一篇博文 "),t("a",{attrs:{href:"https://blog.csdn.net/Teri_Tor/article/details/111461984",target:"_blank",rel:"noopener noreferrer"}},[a._v("Linux 下如何使用搜狗词库"),t("OutboundLink")],1),a._v("。")]),a._v(" "),t("h3",{attrs:{id:"社交"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#社交"}},[a._v("#")]),a._v(" 社交")]),a._v(" "),t("p",[a._v("因为腾讯的软件都没有支持 Linux，所以在深度商店里只能下载到QQ、TIM、微信的 wine 移植版本。移植版本的软件版本落后，问题较多，功能不全。例如 wine TIM 的截图功能无法使用（不过可以用 Deepin 的截图快捷键"),t("code",[a._v("CTRL + ALT + A")]),a._v(" 来代替）；wine 微信频繁闪退。这方面还是等 Deepin 官方后续的优化吧。")]),a._v(" "),t("h3",{attrs:{id:"娱乐"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#娱乐"}},[a._v("#")]),a._v(" 娱乐")]),a._v(" "),t("p",[a._v("听音乐推荐下载网易云音乐。")]),a._v(" "),t("p",[a._v("玩游戏可以使用 steam，从 "),t("a",{attrs:{href:"https://store.steampowered.com/about/",target:"_blank",rel:"noopener noreferrer"}},[a._v("steam 官网"),t("OutboundLink")],1),a._v(" 下载 steam 安装包进行安装。steam 上很多游戏有 Linux 版本，不过不推荐在 Linux 系统上玩游戏，因为卡顿非常严重。Linux 上的游戏都是基于 OpenGL，比起Windows的 DirectX 优化差远了，显卡厂商也不会为 Linux 专门做驱动优化。因此，想玩游戏还是乖乖用 Windows吧。")]),a._v(" "),t("h3",{attrs:{id:"绘图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#绘图"}},[a._v("#")]),a._v(" 绘图")]),a._v(" "),t("p",[a._v("Adobe 套件没有 Linux 版本，所以在 Deepin 上就没法使用到 Adobe Photoshop (PS) 啦。不过我们可以使用 Photoshop 的代替品 "),t("code",[a._v("GNU图像处理程序(GIMP)")]),a._v(" 来帮助我们进行图像处理。使用 "),t("code",[a._v("apt")]),a._v(" 安装GIMP。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" gimp\n")])])]),t("p",[a._v("GIMP 是一个免费的开源图像编辑器，十分小巧，只有 100M 左右的大小。用法和 PS 类似，不过 UI 界面以及功能快捷键和 PS 不太一样，习惯使用 PS 的小伙伴可能不习惯。")]),a._v(" "),t("p",[a._v("为了帮助从 PS 切换到 GIMP 的人，"),t("a",{attrs:{href:"https://diolinux.com.br/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Diolinux"),t("OutboundLink")],1),a._v(" 推出了一个在 GIMP 中模仿 PS 的工具——"),t("a",{attrs:{href:"https://github.com/Diolinux/PhotoGIMP",target:"_blank",rel:"noopener noreferrer"}},[a._v("PhotoGIMP"),t("OutboundLink")],1),a._v("。PhotoGIMP 是 GIMP 的一个插件。下载下来后，将其替换原本 GIMP 的配置文件就能生效了。PhotoGIMP的效果图如下：")]),a._v(" "),t("center",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/NJUaaron/Pictures/GIMP.jpg",alt:"GIMP",height:"400"}})]),a._v(" "),t("p",[a._v("不过笔者在 Deepin 上使用该插件时遇到了一些兼容性的问题，有兴趣的小伙伴可以自己试试。")]),a._v(" "),t("h2",{attrs:{id:"认识变量与-path"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#认识变量与-path"}},[a._v("#")]),a._v(" 认识变量与 PATH")]),a._v(" "),t("p",[a._v("从这一章开始的内容就相对比较硬核了，适合对系统感兴趣的小伙伴继续阅读！阅读前推荐先安装好 VScode。")]),a._v(" "),t("h3",{attrs:{id:"变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[a._v("#")]),a._v(" 变量")]),a._v(" "),t("p",[t("strong",[a._v("变量")]),a._v(" 是 Bash 环境中很重要的一个概念。那么什么是变量呢？简单来说，变量就是用来 "),t("em",[a._v("取代比较复杂的或容易变动的字符串")]),a._v(" 的一个符号。变量最大的好处就是方便！下面这个命令就是变量赋值的一个实例。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addr")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/usr/bin\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("提示")]),a._v(" "),t("p",[a._v("变量赋值的等号旁边不能加空格。")])]),a._v(" "),t("p",[a._v("上面这个命令将 "),t("code",[a._v("/usr/bin")]),a._v(" 这个字符串赋值给了变量 "),t("code",[a._v("addr")]),a._v(" 。在变量前加上 "),t("code",[a._v("$")]),a._v(" 符号就可以使用该变量。我们可以使用 "),t("code",[a._v("echo")]),a._v(" 指令查看变量的内容。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$addr")]),a._v("\n/usr/bin\n")])])]),t("p",[a._v("有了 "),t("code",[a._v("addr")]),a._v(" 变量后，我们以后再访问 "),t("code",[a._v("/usr/bin")]),a._v(" 目录就可以直接用 "),t("code",[a._v("$addr")]),a._v(" 来代替这个复杂的路径字符串了。我们可以直接用以下命令进入 "),t("code",[a._v("/usr/bin")]),a._v(" 目录。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$addr")]),a._v("\n")])])]),t("p",[a._v("上面这条指令就等价于 "),t("code",[a._v("cd /usr/bin")]),a._v("。需要注意的是，变量 "),t("code",[a._v("addr")]),a._v(" 只会存在于当前的 Bash 环境下。也就是说，关闭当前 Bash后，或打开一个新的 Bash，变量 "),t("code",[a._v("addr")]),a._v(" 都不会再存在。")]),a._v(" "),t("p",[a._v("如果要在当前 Bash 环境下取消 "),t("code",[a._v("addr")]),a._v(" 变量，可以使用 "),t("code",[a._v("unset")]),a._v(" 命令或将变量值赋为空。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#以下两种方式都能取消 addr 变量")]),a._v("\n$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("unset")]),a._v(" addr\n$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addr")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("\n")])])]),t("h3",{attrs:{id:"环境变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#环境变量"}},[a._v("#")]),a._v(" 环境变量")]),a._v(" "),t("p",[a._v("某些特定变量会影响到 Bash 的环境，这样的变量叫做环境变量。")]),a._v(" "),t("p",[a._v("我们可以用 "),t("code",[a._v("export")]),a._v(" 命令将普通变量变为环境变量。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" addr\n")])])]),t("p",[a._v("环境变量具有继承性。也就是说，比如 "),t("code",[a._v("addr")]),a._v(" 在当前 Bash 中是生效的，如果我们在这个 Bash 的基础上再打开一个 Bash，新 Bash 仍然可以使用变量 "),t("code",[a._v("addr")]),a._v("。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v("\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#在当前Bash基础上打开一个子Bash")]),a._v("\n$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exit")]),a._v("\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#退出当前Bash")]),a._v("\n")])])]),t("p",[t("code",[a._v("env")]),a._v(" 命令可以查看系统中所有的环境变量。这些环境变量都是系统开机时就定义好的，会影响到所有的 Bash 。（简单来说是这样）")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("env")]),a._v("\n")])])]),t("p",[t("code",[a._v("PATH")]),a._v(" 是系统预设的一个最重要的环境变量！ 你能否在任何目录下运行某个命令，与 "),t("code",[a._v("PATH")]),a._v(" 这个变量有很大的关系。例如当你下达 "),t("code",[a._v("ls")]),a._v(" 这个命令的时候，系统就是通过 "),t("code",[a._v("PATH")]),a._v(" 这个变量里面的内容所记录的路径顺序来搜寻命令的。如果在搜寻完 "),t("code",[a._v("PATH")]),a._v(" 变量内的路径还找不到 "),t("code",[a._v("ls")]),a._v(" 这个命令时， 就会在屏幕上显示『 未找到指令 』的错误信息了。")]),a._v(" "),t("p",[a._v("我们可以使用 "),t("code",[a._v("which")]),a._v(" 命令来询问 "),t("code",[a._v("ls")]),a._v(" 这个命令在哪一个路径下。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("which")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v("\n/usr/bin/ls\n")])])]),t("p",[a._v("由此得知，"),t("code",[a._v("ls")]),a._v(" 实际上是一个在 "),t("code",[a._v("/usr/bin/")]),a._v(" 路径下的名为『ls』的可执行文件。当我们在 Bash 中使用 "),t("code",[a._v("ls")]),a._v(" 指令时，其实就是在运行『ls』这个文件。")]),a._v(" "),t("p",[a._v("可以用 "),t("code",[a._v("echo")]),a._v(" 来看看 "),t("code",[a._v("PATH")]),a._v(" 的内容。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$PATH")]),a._v("\n/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin\n")])])]),t("p",[a._v("每个路径以冒号隔开。可以看到， "),t("code",[a._v("/usr/bin/")]),a._v(" 确实是 "),t("code",[a._v("PATH")]),a._v(" 中的一个路径，因此系统能够通过 "),t("code",[a._v("PATH")]),a._v(" 找到 "),t("code",[a._v("ls")]),a._v(" 命令的文件。")]),a._v(" "),t("p",[a._v("如果你是从官网下载的 VScode 安装包进行安装的，那就可以直接在 Bash 使用 "),t("code",[a._v("code")]),a._v(" 命令来打开 VScode。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("which")]),a._v(" code\n/usr/bin/code\n")])])]),t("p",[a._v("实际上，VScode 安装包在安装过程中，就将可执行文件添加到了 "),t("code",[a._v("/usr/bin/")]),a._v(" 路径下，因此我们可以在终端用 "),t("code",[a._v("code")]),a._v(" 打开 VScode。但如果是在深度商店安装的 VScode，则需要自己将 code 添加到 "),t("code",[a._v("PATH")]),a._v(" 环境变量中，才能在终端中使用。")]),a._v(" "),t("h3",{attrs:{id:"添加软件到-path"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加软件到-path"}},[a._v("#")]),a._v(" 添加软件到 PATH")]),a._v(" "),t("p",[a._v("很多时候我们安装软件时，软件并没有把可执行文件加入到 "),t("code",[a._v("PATH")]),a._v(" 中。如果我们想要从终端 Bash 启动这个程序，那就必须要靠我们自己把软件加入到 "),t("code",[a._v("PATH")]),a._v(" 环境变量。添加的方法有两种：建立链接和添加新路径到 PATH。下面将以添加深度商店下载的 VScode 到 "),t("code",[a._v("PATH")]),a._v(" 为例，介绍这两种方式。")]),a._v(" "),t("h4",{attrs:{id:"建立链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#建立链接"}},[a._v("#")]),a._v(" 建立链接")]),a._v(" "),t("p",[a._v("Linux系统中有种文件是链接文件，链接的目的是实现文件的共享。链接分为两种，一种是硬链接（Hard Link），另一种是软链接或者也称为符号链接（Symbolic Link）。硬链接类似创建原文件的一个副本，而软链接类似 Windows 中创建一个文件的快捷方式。添加软件到 PATH 时推荐使用软链接。")]),a._v(" "),t("p",[a._v("从深度商店下载的 VScode 的可执行文件位于 "),t("code",[a._v("/opt/apps/com.visualstudio.code/files/share/bin/code")]),a._v("，我们需要将其链接到 "),t("code",[a._v("PATH")]),a._v(" 的其中一个路径下，这样系统就能通过 "),t("code",[a._v("PATH")]),a._v(" 找到链接的文件，从而找到 VScode 的源可执行文件。我们一般会链接到 "),t("code",[a._v("/usr/bin")]),a._v(" 目录下。")]),a._v(" "),t("p",[a._v("使用 "),t("code",[a._v("ln -s")]),a._v(" 建立软链接：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -s /opt/apps/com.visualstudio.code/files/share/bin/code /usr/bin/code\n")])])]),t("p",[a._v("如上命令将 "),t("code",[a._v("/opt/apps/com.visualstudio.code/files/share/bin/code")]),a._v(" 软链接到了 "),t("code",[a._v("/usr/bin/code")]),a._v(" 文件。")]),a._v(" "),t("p",[a._v("我们可以使用 "),t("code",[a._v("ls -l")]),a._v(" 查看链接文件的详细情况。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" -l /usr/bin/ "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" code\nlrwxrwxrwx "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" root root  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("24")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("12")]),a._v("月 "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("17")]),a._v(" 09:48 code -"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" /opt/apps/com.visualstudio.code/files/share/bin/code\n")])])]),t("p",[t("code",[a._v("ls -l")]),a._v(" 命令会列出文件的详细信息，包括文件的类型、权限、修改时间等。我们可以在这一行末尾看到一个 "),t("code",[a._v("->")]),a._v(" 符号，这表示文件夹中的 "),t("code",[a._v("code")]),a._v(" 文件是从 "),t("code",[a._v("/opt/apps/com.visualstudio.code/files/share/bin/")]),a._v(" 路径下的『code』链接而来，这说明我们链接成功了。")]),a._v(" "),t("p",[a._v("现在我们可以看看能不能在终端打开 VScode 啦！")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" code\n")])])]),t("h4",{attrs:{id:"添加新路径到-path"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加新路径到-path"}},[a._v("#")]),a._v(" 添加新路径到 PATH")]),a._v(" "),t("p",[a._v("建立链接是一种非常方便的方法。然而，如果一个文件夹中有多个可执行文件需要加入到 PATH 中，一个一个地建立链接不如直接把文件夹路径添加到 "),t("code",[a._v("PATH")]),a._v(" 变量中。")]),a._v(" "),t("p",[a._v("我们可以用如下命令将 VScode 的目录加入到 "),t("code",[a._v("PATH")]),a._v(" 中。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("VSCODE_HOME")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/opt/apps/com.visualstudio.code/files/share/\n$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("PATH")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$PATH")]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${VSCODE}")]),a._v("/bin\n")])])]),t("p",[a._v("如上命令定义了一个变量 "),t("code",[a._v("VSCODE_HOME")]),a._v(" 记录 VScode 的目录，然后在 "),t("code",[a._v("PATH")]),a._v(" 后面以冒号隔开添加了 VScode 的 bin 目录。这样一来，"),t("code",[a._v("PATH")]),a._v(" 中就添加好了 VScode 的目录。但这样有一个问题，那就是如果重新启动系统，那么系统会重新初始化变量的值 "),t("code",[a._v("PATH")]),a._v("，所以下次开机的时候还得重新添加 VScode 的目录。")]),a._v(" "),t("p",[a._v("Linux 系统启动时，系统会读取 "),t("code",[a._v("/etc/profile")]),a._v(" 文件进行环境初始化。因此，我们只要将我们的命令写在 "),t("code",[a._v("/etc/profile")]),a._v(" 文件中，就可以一直生效了。")]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("提示")]),a._v(" "),t("p",[t("code",[a._v("/etc/profile")]),a._v(" 文件属于系统整体的配置，对所有用户有效。如果只想修改单个用户的设置，可以将命令写在 "),t("code",[a._v("~/.bash_profile")]),a._v(" 或 "),t("code",[a._v("~/.bash_login")]),a._v("或 "),t("code",[a._v("~/.profile")]),a._v(" 文件中，这三个文件在用户登录时会被系统依次读取。可以结合实际情况决定在哪个文件中写入 "),t("code",[a._v("PATH")]),a._v(" 设置。")])]),a._v(" "),t("p",[a._v("用文本编辑器 "),t("code",[a._v("vim")]),a._v("  打开 "),t("code",[a._v("/etc/profile")]),a._v(" 文件。(该文件是只读文件，必须用 "),t("code",[a._v("sudo")]),a._v(" 模式打开才能修改)")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("vim")]),a._v(" /etc/profile\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("提示")]),a._v(" "),t("p",[a._v("如果不会使用 "),t("code",[a._v("vim")]),a._v("，也可以使用 Linux 自带的编辑器 LibreOffice。执行命令 "),t("code",[a._v("sudo libreoffice /etc/profile")]),a._v(" 打开 LibreOffice 进行编辑。Deepin 也提供了非常不错的文本编辑器 Dedit，但目前不能以 "),t("code",[a._v("sudo")]),a._v(" 模式打开。")])]),a._v(" "),t("p",[a._v("在文件末尾，添加如下两行内容。保存并退出。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("VSCODE_HOME")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/opt/apps/com.visualstudio.code/files/share/\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("PATH")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$PATH")]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${VSCODE}")]),a._v("/bin\n")])])]),t("p",[a._v("使用"),t("code",[a._v("source")]),a._v("命令或"),t("code",[a._v(".")]),a._v("命令读入 "),t("code",[a._v("profile")]),a._v("，使环境变量立即生效。（重启也可以使环境变量的修改生效）")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#下面这两个命令效果是一样的")]),a._v("\n$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("source")]),a._v(" /etc/profile\n$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v(" /etc/profile\n")])])]),t("p",[a._v("这样我们就能在 Bash 中使用 "),t("code",[a._v("code")]),a._v(" 命令啦。如果还是无法使用的话，可以用"),t("code",[a._v("echo")]),a._v("指令查看环境变量是否添加成功。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$PATH")]),a._v("\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("提示")]),a._v(" "),t("p",[a._v("如果两个目录含有名字相同的可执行程序，通过 "),t("code",[a._v("echo")]),a._v(" 查看 "),t("code",[a._v("PATH")]),a._v("，可以比较优先级。处于前面位置的路径，优先级更高，会优先执行。")])]),a._v(" "),t("h3",{attrs:{id:"补充"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[a._v("#")]),a._v(" 补充")]),a._v(" "),t("p",[a._v("现在我们应该能在终端 Bash 中使用 "),t("code",[a._v("code")]),a._v(" 命令了！我们还能查看 VScode 的版本信息。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" code --version\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.52")]),a._v(".1\nea3859d4ba2f3e577a159bc91e3074c5d85c0523\nx64\n")])])]),t("p",[a._v("但是有可能并不能在 "),t("code",[a._v("sudo")]),a._v(" 模式下使用 "),t("code",[a._v("code")]),a._v(" 命令，会提示『 未找到指令 』。为什么会这样呢？实际上在 "),t("code",[a._v("sudo")]),a._v(" 启动时，系统会重置 "),t("code",[a._v("PATH")]),a._v(" 变量的值，使得我们新添加的路径就失效了。")]),a._v(" "),t("p",[a._v("如果不想要 "),t("code",[a._v("sudo")]),a._v(" 重置 "),t("code",[a._v("PATH")]),a._v("，我们可以修改 "),t("code",[a._v("sudo")]),a._v(" 的配置文件 "),t("code",[a._v("/etc/sudoers")]),a._v("。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("vim")]),a._v(" /etc/sudoers\n")])])]),t("p",[a._v("打开文件后，将其中的 "),t("code",[a._v("Defaults\tenv_reset")]),a._v(" 改为 "),t("code",[a._v("Defaults\t!env_reset")]),a._v(" 。保存并退出。这样一来，就不会重置 "),t("code",[a._v("PATH")]),a._v(" 了。")]),a._v(" "),t("h2",{attrs:{id:"后续"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后续"}},[a._v("#")]),a._v(" 后续")]),a._v(" "),t("p",[a._v("这次博文先写到这儿，感觉要说的内容还是挺多的，希望这篇文章能够帮助大家。如果反响好的话，后续会持续更新。如果文章中有错误，或是没说清楚的地方，亦或是抱有疑问想与我交流，欢迎邮件联系 aaronxyliu@qq.com。不吝赐教！")])],1)}),[],!1,null,null,null);s.default=v.exports}}]);