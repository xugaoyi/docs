(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{430:function(t,e,a){"use strict";a.r(e);var n=a(46),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"contribute-code-to-deepin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#contribute-code-to-deepin"}},[t._v("#")]),t._v(" Contribute code to Deepin")]),t._v(" "),a("p",[t._v("**How do I contribute code to "),a("code",[t._v("Deepin|UOS")]),t._v("? **")]),t._v(" "),a("p",[a("code",[t._v("fork")]),t._v(" "),a("a",{attrs:{href:"https://github.com/linuxdeepin",target:"_blank",rel:"noopener noreferrer"}},[t._v("linuxdeepin"),a("OutboundLink")],1),t._v(" inside the repository and submit "),a("code",[t._v("Pull Requests")]),t._v(".")]),t._v(" "),a("br"),t._v(" "),a("p",[a("font",{attrs:{size:"5",color:"red"}},[a("strong",[t._v("Note the Commit specification:")])])],1),t._v(" "),a("h3",{attrs:{id:"external-commits-to-the-commit-format-for-pull-requests"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#external-commits-to-the-commit-format-for-pull-requests"}},[t._v("#")]),t._v(" External commits to the "),a("code",[t._v("Commit")]),t._v(" format for "),a("code",[t._v("Pull requests")]),t._v(":")]),t._v(" "),a("p",[t._v("Third parties or individuals (including insiders), submitting contributions, need to follow the same internal "),a("code",[t._v("commit")]),t._v(" format.")]),t._v(" "),a("p",[a("em",[a("strong",[t._v("Note: Because the format of gerrit, please submit with one pull request map to one commit, if you have numbers of commits, you should create more pull request")])]),t._v(" "),a("br")]),t._v(" "),a("h3",{attrs:{id:"standard"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#standard"}},[t._v("#")]),t._v(" Standard:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("title "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mandatory, not blank: brief summary title"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nDescription "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mandatory, not blank: detailed description"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nLog: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Compulsory, can be empty "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("not recommended"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": will be used by the internal crp system, "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" not know how to fill in, just repeat the title content"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nBug: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Optional, can be empty: connect "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" bug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nIssue: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Optional, can be empty: fixed issuse "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("link")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nTask: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Optional, can be empty: Task link, external parties not available"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("br"),t._v(" "),a("h3",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[t._v("#")]),t._v(" Example:")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/linuxdeepin/dtkgui/commit/de1f742edefee47963515acf63721ffb53193a8b",target:"_blank",rel:"noopener noreferrer"}},[t._v("see link"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("fix: Fix default display right angle\n\nA call to "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("FETCH_PROPERTY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"DTK/WindowRadius"')]),t._v(", windowRadius"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" will "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" -1 by default, resulting "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" the right angle parameter. So the cup is fixed here.\n\nLog:\n")])])]),a("br"),t._v(" "),a("blockquote",[a("p",[t._v("PS: The above is a demonstration of the simplest submission, note that")]),t._v(" "),a("ol",[a("li",[t._v("title preferably preceded by modifiers: "),a("code",[t._v("fix:")]),t._v(", "),a("code",[t._v("docs:")]),t._v(", "),a("code",[t._v("feat:")]),t._v(" and so on")]),t._v(" "),a("li",[t._v("where blank lines are essential ("),a("code",[t._v("title")]),t._v(" "),a("code",[t._v("detail")]),t._v(" "),a("code",[t._v("Log:")]),t._v(" should have blank lines between them, "),a("code",[t._v("L")]),t._v(" should be capitalized, English colon)")]),t._v(" "),a("li",[a("code",[t._v("Log:")]),t._v(" The initial letter of this line must be capitalized, and an English colon is indispensable, and the rest of the line can be left unwritten.")])])]),t._v(" "),a("p",[t._v("If you do not submit according to this specification, the bot "),a("code",[t._v("bot")]),t._v(" will be judged as minus "),a("code",[t._v("-2")]),t._v(" (for "),a("code",[t._v("Deepin")]),t._v(" employees as well) and will not be merged; for missing parts, the bot will fill them in automatically.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("Change-Id: I4988af2bdd0a57ae99d9c5562fe8ba6808de8700\nReviewed-on: http://gerrit.uniontech.com/c/dtkgui/+/7769\nReviewed-by: "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("mailman@uniontech.com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nReviewed-by: xxx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("xxx@uniontech.com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nTested-by: "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("mailman@uniontech.com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("br"),t._v(" "),a("p",[a("code",[t._v("GitHub")]),t._v(" detects if the commit information is canonical "),a("code",[t._v("hook")]),t._v(" will be set later, suggestions have been adopted.")]),t._v(" "),a("blockquote",[a("p",[t._v("Updated: 2020-12-22, referenced in "),a("a",{attrs:{href:"https://github.com/linuxdeepin/developer-center/wiki/Commit-Information-standard-en",target:"_blank",rel:"noopener noreferrer"}},[t._v("Wiki"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=s.exports}}]);